rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate shape data
    function isValidShape(shape) {
      return shape.keys().hasAll(['id', 'type', 'x', 'y', 'createdBy', 'createdAt'])
        && shape.id is string
        && shape.type in ['rectangle', 'circle', 'line', 'text', 'triangle', 'star']
        && shape.x is number && shape.x >= 0 && shape.x <= 20000
        && shape.y is number && shape.y >= 0 && shape.y <= 20000
        && shape.createdBy is string
        && shape.createdAt is timestamp;
    }
    
    // Helper function to validate lock fields
    function isValidLock(shape) {
      return (!shape.keys().hasAny(['isLocked', 'lockedBy', 'lockedAt'])
        || (shape.isLocked is bool 
            && (shape.isLocked == false 
                || (shape.lockedBy is string && shape.lockedAt is timestamp))));
    }
    
    // Canvas documents - contain array of shapes
    match /canvas/{canvasId} {
      // Allow authenticated users to read
      allow read: if isAuthenticated();
      
      // Allow authenticated users to write
      // In production, you might want to add more granular validation
      allow write: if isAuthenticated()
        && request.resource.data.keys().hasAll(['shapes'])
        && request.resource.data.shapes is list;
        // Note: Full shape validation would require iterating through the array
        // which is not directly supported in Firestore rules.
        // Consider using Cloud Functions for complex validation.
    }
    
    // User profile documents
    match /users/{userId} {
      // Any authenticated user can read profiles (for profile popups)
      allow read: if isAuthenticated();
      
      // Users can create/update their own profile
      allow create: if isAuthenticated() && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['uid', 'email'])
        && request.resource.data.uid == userId;
      
      // Users can update their own profile with validation
      allow update: if isAuthenticated() && request.auth.uid == userId
        // Validate bio field if present (max 200 chars)
        && (!request.resource.data.keys().hasAny(['bio']) 
            || (request.resource.data.bio is string 
                && request.resource.data.bio.size() <= 200));
    }
    
    // Block all other reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

